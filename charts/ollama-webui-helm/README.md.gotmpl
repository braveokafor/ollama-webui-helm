{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.description" . }}

![Ollama Web UI Demo](https://github.com/ollama-webui/ollama-webui/blob/main/demo.gif?raw=true)

## TL;DR

```sh
helm repo add ollama-webui https://braveokafor.github.io/ollama-webui-helm/
helm install ollama ollama-webui/ollama-webui
```

## Introduction

Deploy [Ollama WebUI](https://github.com/ollama-webui/ollama-webui) on Kubernetes easily with this Helm chart.  

It enables you to run a ChatGPT-style web UI client, with a variety of open-source large language models available at [ollama.ai/library](ollama.ai/library).  


{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

## Installing the Chart

To install the chart with the release name `ollama`:

```sh
helm install ollama ollama-webui/ollama-webui
```

The command deploys Ollama WebUI on the Kubernetes cluster in the default configuration.  

The [Parameters](#parameters) section lists the parameters that can be configured during installation.

> **Tip**: List all releases using `helm list`

## Uninstalling the Chart

To uninstall/delete the `ollama` deployment:

```sh
helm delete ollama
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

## Parameters


Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example,

```console
helm install my-release \
  --set ollama.gpu.enabled=true \
  --set mongodb.enabled=true \
    ollama-webui/ollama-webui
```
The above command enables GPU support for Ollama.
Additionaly it installs a MongoDB deployment, and configures authentication for the WebUI.

Alternatively, a YAML file that specifies the values for the above parameters can be provided while installing the chart. For example:

```console
helm install ollama -f values.yaml ollama-webui/ollama-webui
```

Example fully configured `values.yaml`:  

```yaml
ollama:
  gpu:
    enabled: "true"
    num: 2
  pdb:
    create: "true"
  autoscaling:
    enabled: false
  persistence:
    accessModes:
      - ReadWriteOnce
  nodeSelector:
    cloud.google.com/gke-spot: "true"
    cloud.google.com/gke-accelerator: "nvidia-tesla-t4"
  resources:
    requests:
      memory: 8192Mi
      cpu: 4000m

webui:
  nodeSelector:
    cloud.google.com/gke-spot: "true"

mongodb:
  enabled: true

ingress:
  enabled: true
  pathType: Prefix
  hostname: ollama.example.com
  annotations:
    kubernetes.io/ingress.global-static-ip-name: ollama
    kubernetes.io/ingress.class: gce
  extraRoutes:
    - name: api.ollama.example.com
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: ollama-ollama-webui-ollama
              port:
                name: http
```

## Configuration and installation details

### External database support

You may want to have Ollama WebUI connect to an external database rather than installing one inside your cluster. Typical reasons for this are to use a managed database service, or to share a common database server for all your applications.  

To achieve this, the chart allows you to specify credentials for an external database with the [`externalDatabase` parameter](#database-parameters). You should also disable the MongoDB installation with the `mongodb.enabled` option. Here is an example:

```console
mongodb.enabled=false
externalDatabase.enabled=true
externalDatabase.databaseUrl="mongodb://ollama:ollamaR00tPassw0rd@example-mongodb.ollama:27017/"
```

### Ingress

This chart provides support for Ingress resources.  
If an Ingress controller, such as [nginx-ingress](https://kubeapps.com/charts/stable/nginx-ingress) or [traefik](https://kubeapps.com/charts/stable/traefik) is installed on the cluster, that Ingress controller can be used to serve Ollama WebUI.

To enable Ingress integration, set `ingress.enabled` to `true`.  
The `ingress.hostname` property can be used to set the host name.  
The `ingress.tls` parameter can be used to add the TLS configuration for this host. 

### TLS secrets

The chart also facilitates the creation of TLS secrets for use with the Ingress controller, with different options for certificate management.
