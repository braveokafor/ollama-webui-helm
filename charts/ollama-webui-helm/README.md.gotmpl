{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.description" . }}

![Ollama Web UI Demo](https://github.com/ollama-webui/ollama-webui/blob/main/demo.gif?raw=true)

## TL;DR

```sh
helm repo add braveokafor https://braveokafor.github.io/helm-charts/
helm install ollama braveokafor/ollama-webui
``` 

#### OR:  

```sh
helm repo add braveokafor https://charts.braveokafor.com
helm install ollama braveokafor/ollama-webui
```

## Introduction

Deploy [Ollama WebUI](https://github.com/ollama-webui/ollama-webui) on Kubernetes easily with this Helm chart.  

It enables you to run a ChatGPT-style web UI client, with a variety of open-source large language models available at [ollama.ai/library](ollama.ai/library).  


{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

## Installing the Chart

To install the chart with the release name `ollama`:

```sh
helm install ollama ollama-webui/ollama-webui
```

The command deploys Ollama WebUI on the Kubernetes cluster in the default configuration.  

The [Parameters](#parameters) section lists the parameters that can be configured during installation.

> **Tip**: List all releases using `helm list`

## Uninstalling the Chart

To uninstall/delete the `ollama` deployment:

```sh
helm delete ollama
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

## Configuration and installation details

Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example,

```console
helm install ollama \
  --set ollama.gpu.enabled=true \
  --set webui.ingress.enabled=true \
  --set webui.ingress.hostname=ollama.example.com
    braveokafor/ollama-webui
```
The above command enables GPU support for Ollama.

Alternatively, a YAML file that specifies the values for the above parameters can be provided while installing the chart. For example:

```console
helm install ollama -f values.yaml braveokafor/ollama-webui
```

Example fully configured `values.yaml`: 

```yaml
# values.yaml

webui:
  nodeSelector:
    cloud.google.com/gke-spot: "true"
  ingress:
    enabled: true
    pathType: Prefix
    hostname: ollama.braveokafor.com
    annotations:
      kubernetes.io/ingress.global-static-ip-name: ollama-ui
      kubernetes.io/ingress.class: gce

ollama:
  gpu:
    enabled: "true"
    num: 1
  pdb:
    create: "false"
  autoscaling:
    enabled: false
  persistence:
    accessModes:
      - ReadWriteOnce
  nodeSelector:
    cloud.google.com/gke-spot: "true"
    cloud.google.com/gke-accelerator: "nvidia-tesla-t4"
  resources:
    requests:
      memory: 8192Mi
      cpu: 4000m
  tolerations:
    - key: nvidia.com/gpu
      operator: Exists
      effect: NoSchedule
  ingress:
    enabled: false
  service:
    type: LoadBalancer
```

### Ingress

This chart provides support for Ingress resources.  
If an Ingress controller, such as [nginx-ingress](https://kubeapps.com/charts/stable/nginx-ingress) or [traefik](https://kubeapps.com/charts/stable/traefik) is installed on the cluster, that Ingress controller can be used to serve Ollama WebUI.

To enable Ingress integration, set `webui.ingress.enabled` to `true`.  
The `webui.ingress.hostname` property can be used to set the host name.  
The `webui.ingress.tls` parameter can be used to add the TLS configuration for this host. 

### TLS secrets

The chart also facilitates the creation of TLS secrets for use with the Ingress controller, with different options for certificate management.


## Parameters

